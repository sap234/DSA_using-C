#include<stdio.h>
#include<stdlib.h>
#define QUEUESIZE 10
struct queue{
	int a[QUEUESIZE];
	int front,rear;
	struct queue*next;
};
int qempty(struct queue*);
int qfull(struct queue*);
void enqueue(struct queue*,int);
int dequeue(struct queue*);
void main()
{
	int ch,item;
	struct queue s;
	struct queue*q=&s;
	q->front=-1;
	q->rear=-1;
	while(1)
	{
		printf("\n1.enqueue\n2.dequeue\n3.traverse\n0.exit\n");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1: printf("enter element:");
					scanf("%d",&item);
					enqueue(q,item);
					break;
			case 2: item=dequeue(q);
					if(item!=-9999)
						printf("deleted item:%d",item);
					break;
			case 0: exit(0);
				
					
		}
	}
}
int qempty(struct queue*q)
{
	if(q->front==-1 && q->rear==-1)
			return(1);
	else
			return(0);
	
}
int qfull(struct queue*q)
{
	if((q->front==0 && q->rear==QUEUESIZE-1)||(q->front==q->rear+1))
		return(1);
	else
		return(0);
		
}
void enqueue(struct queue*q,int item)
{
	if(qfull(q))
	{
		printf("overflow");
		return;
		
	}
	if(qempty(q))
	{
		q->front=0;
		q->rear=0;
		
	}
	else if(q->rear==QUEUESIZE-1)
		q->rear=0;
	else
		q->rear=q->rear+1;
	q->a[q->rear]=item;
}
int dequeue(struct queue*q)
{
	int item;
	if(qempty(q))
	{
		printf("underflow");
		return(-9999);
	}
	item=q->a[q->front];
	if(q->front==q->rear)
	{
		q->front=-1;
		q->rear=-1;
	}
	else if(q->front==QUEUESIZE-1)
		q->front=0;
	else
		q->front=q->front+1;
	return(item);	
}
